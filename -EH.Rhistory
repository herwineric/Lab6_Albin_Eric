as.numeric(intToBits(x$w))
furp <- as.numeric(intToBits(x$w))
furp*x$v
furp*x$w
length(furp*x$w > 0)
furp*x$w > 0
length(furp*x$w[ furp> 0])
furp*x$w[ furp> 0]
(furp*x$w)[ furp> 0]
length((furp*x$w)[ furp> 0])
(furp*x$v)[ furp> 0]
knapsack_brute_force <- function(x, W,parallel = FALSE){
##JAG TROR DET AR DENNA SOM GOR FEL!
if(parallel == FALSE){
vect2 <- c()
txt <- c()
test <- c()
n <- 0
for(i in 1:nrow(x)){
for(j in 1:nrow(x)){
n <- n+1
test[n] <- x$w[i] + x$w[j]
vect2[n] <- round(x[i,2] + x[j,2],0)
txt[i] <- paste(rownames(x[i,]), rownames(x[j,]))
}
}
matrWEI <-  matrix(test,8)
matrVAL <- matrix(vect2,8)
matrWEI2 <- matrWEI[lower.tri(matrWEI,diag = FALSE)]
matrVAL2 <- matrVAL[lower.tri(matrVAL, diag = FALSE)]
data <- data.frame(matrWEI2, matrVAL2)
W_fit <- data[which(data$matrWEI2<W),]
r_name <- as.numeric(rownames(W_fit[which.max(W_fit$matr2Evolve),]))
#hittar maximum
maximum <- max(W_fit$matrVAL2)
elemenT <- which(matrVAL == maximum, arr.ind = TRUE)[1,]
list_ret <- list(value = maximum, elements = as.numeric(elemenT))
} else {
a_w <- x$w
b_w <<- x$w
c_v <- x$v
d_v <<- x$v
#CPU parallel
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(no_cores)
clusterExport(cl, "b_w")
matr1 <- parSapply(cl=cl, X = a_w,
FUN = function(x){
sapply(X = b_w, FUN = function(y){ x+y })
}
)
matr1Evolve <- matr1[lower.tri(matr1,diag = FALSE)]
clusterExport(cl, "d_v")
matr2 <- parSapply(cl, X = c_v,
FUN = function(x){
sapply(X = d_v, FUN = function(y){ round(x+y,0)
})
}
)
matr2Evolve <- matr2[lower.tri(matr2,diag = FALSE)]
stopCluster(cl)
#data with all possible wights and values
data <- data.frame(matr1Evolve, matr2Evolve)
#hittar dem som passar W mattet
W_fit <- data[which(data$matr1Evolve<W),]
r_name <- as.numeric(rownames(W_fit[which.max(W_fit$matr2Evolve),]))
#hittar maximum
maximum <- max(W_fit$matr2Evolve)
elemenT <- which(matr2 == maximum, arr.ind = TRUE)[1,]
list_ret <- list(value = maximum, elements = as.numeric(elemenT))
}
return(list_ret)
}
knapsack_brute_force(x = knapsack_objects[1:100,], W = 3500, parallel = T)
knapsack_brute_force(x = knapsack_objects[1:100,], W = 3500, parallel = F)
W_fit
x = knapsack_objects[1:100,]
vect2 <- c()
txt <- c()
test <- c()
n <- 0
for(i in 1:nrow(x)){
for(j in 1:nrow(x)){
n <- n+1
test[n] <- x$w[i] + x$w[j]
vect2[n] <- round(x[i,2] + x[j,2],0)
txt[i] <- paste(rownames(x[i,]), rownames(x[j,]))
}
}
matrWEI <-  matrix(test,8)
matrVAL <- matrix(vect2,8)
matrWEI2 <- matrWEI[lower.tri(matrWEI,diag = FALSE)]
matrVAL2 <- matrVAL[lower.tri(matrVAL, diag = FALSE)]
matrWEI
test
knapsack_brute_force <- function(x, W,parallel = FALSE){
##JAG TROR DET AR DENNA SOM GOR FEL!
if(parallel == FALSE){
vect2 <- c()
txt <- c()
test <- c()
n <- 0
for(i in 1:nrow(x)){
for(j in 1:nrow(x)){
n <- n+1
test[n] <- x$w[i] + x$w[j]
vect2[n] <- round(x[i,2] + x[j,2],0)
txt[i] <- paste(rownames(x[i,]), rownames(x[j,]))
}
}
matrWEI <-  matrix(test,nrow(x))
matrVAL <- matrix(vect2,nrow(x))
matrWEI2 <- matrWEI[lower.tri(matrWEI,diag = FALSE)]
matrVAL2 <- matrVAL[lower.tri(matrVAL, diag = FALSE)]
data <- data.frame(matrWEI2, matrVAL2)
W_fit <- data[which(data$matrWEI2<W),]
r_name <- as.numeric(rownames(W_fit[which.max(W_fit$matr2Evolve),]))
#hittar maximum
maximum <- max(W_fit$matrVAL2)
elemenT <- which(matrVAL == maximum, arr.ind = TRUE)[1,]
list_ret <- list(value = maximum, elements = as.numeric(elemenT))
} else {
a_w <- x$w
b_w <<- x$w
c_v <- x$v
d_v <<- x$v
#CPU parallel
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(no_cores)
clusterExport(cl, "b_w")
matr1 <- parSapply(cl=cl, X = a_w,
FUN = function(x){
sapply(X = b_w, FUN = function(y){ x+y })
}
)
matr1Evolve <- matr1[lower.tri(matr1,diag = FALSE)]
clusterExport(cl, "d_v")
matr2 <- parSapply(cl, X = c_v,
FUN = function(x){
sapply(X = d_v, FUN = function(y){ round(x+y,0)
})
}
)
matr2Evolve <- matr2[lower.tri(matr2,diag = FALSE)]
stopCluster(cl)
#data with all possible wights and values
data <- data.frame(matr1Evolve, matr2Evolve)
#hittar dem som passar W mattet
W_fit <- data[which(data$matr1Evolve<W),]
r_name <- as.numeric(rownames(W_fit[which.max(W_fit$matr2Evolve),]))
#hittar maximum
maximum <- max(W_fit$matr2Evolve)
elemenT <- which(matr2 == maximum, arr.ind = TRUE)[1,]
list_ret <- list(value = maximum, elements = as.numeric(elemenT))
}
return(list_ret)
}
knapsack_brute_force(x = knapsack_objects[1:100,], W = 3500, parallel = F)
knapsack_brute_force(x = knapsack_objects[1:100,], W = 3500, parallel = T)
knapsack_brute_force(x = knapsack_objects[1:8,], W = 2000)
knapsack_brute_force(x = knapsack_objects[1:12,], W = 2000)
knapsack_brute_force(x = knapsack_objects[100:250,], W = 3500, parallel = F)
knapsack_brute_force(x = knapsack_objects[100:250,], W = 3500, parallel = T)
knapsack_brute_force(x = knapsack_objects[100:250,], W = 3500, parallel = F)
knapsack_brute_force(x = knapsack_objects[100:250,], W = 3500, parallel = T)
set.seed(42)
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
x = knapsack_objects[1:8,]
x
knapsack_brute_force <- function(x, W,parallel = FALSE){
##JAG TROR DET AR DENNA SOM GOR FEL!
if(parallel == FALSE){
vect2 <- c()
test <- c()
n <- 0
for(i in 1:nrow(x)){
for(j in 1:nrow(x)){
n <- n+1
test[n] <- x$w[i] + x$w[j]
vect2[n] <- round(x[i,2] + x[j,2],0)
}
}
matrWEI <-  matrix(test,nrow(x))
matrVAL <- matrix(vect2,nrow(x))
matrWEI2 <- matrWEI[lower.tri(matrWEI,diag = FALSE)]
matrVAL2 <- matrVAL[lower.tri(matrVAL, diag = FALSE)]
data <- data.frame(matrWEI2, matrVAL2)
#hittar vilket fit som passar W
W_fit <- data[which(data$matrWEI2<W),]
r_name <- as.numeric(rownames(W_fit[which.max(W_fit$matr2Evolve),]))
#hittar maximum
maximum <- max(W_fit$matrVAL2)
elemenT <- which(matrVAL == maximum, arr.ind = TRUE)[1,]
list_ret <- list(value = maximum, elements = as.numeric(elemenT))
} else {
a_w <- x$w
b_w <<- x$w
c_v <- x$v
d_v <<- x$v
#CPU parallel
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(no_cores)
clusterExport(cl, "b_w")
matr1 <- parSapply(cl=cl, X = a_w,
FUN = function(x){
sapply(X = b_w, FUN = function(y){ x+y })
}
)
matr1Evolve <- matr1[lower.tri(matr1,diag = FALSE)]
clusterExport(cl, "d_v")
matr2 <- parSapply(cl, X = c_v,
FUN = function(x){
sapply(X = d_v, FUN = function(y){ round(x+y,0)
})
}
)
matr2Evolve <- matr2[lower.tri(matr2,diag = FALSE)]
stopCluster(cl)
#data with all possible wights and values
data <- data.frame(matr1Evolve, matr2Evolve)
#hittar dem som passar W mattet
W_fit <- data[which(data$matr1Evolve<W),]
r_name <- as.numeric(rownames(W_fit[which.max(W_fit$matr2Evolve),]))
#hittar maximum
maximum <- max(W_fit$matr2Evolve)
elemenT <- which(matr2 == maximum, arr.ind = TRUE)[1,]
list_ret <- list(value = maximum, elements = as.numeric(elemenT))
}
return(list_ret)
}
knapsack_brute_force(x = knapsack_objects[1:8,], W = 4000)
knapsack_brute_force(x = knapsack_objects[1:8,], W = 10000)
furp
furp <- as.numeric(intToBits(x$w))
furp
data.frame(furp, seq(1,8,by = 8))
data.frame(furp, seq(1,8,by = 1))
data.frame(furp, rep(1:8,8))
data.frame(furp, order(rep(1:8,8)))
rep(1:8,8)
data.frame(furp, sort(rep(1:8,8)))
seq_along(furp)
(seq_along(furp)-1) %/% 10
tapply( furp, (seq_along(furp)-1) %/% 10, sum)
(furp*x$v)[ furp> 0]
(furp*x$v)
qout <- round(furp*x$v,0)
tapply( qout, (seq_along(qout)-1) %/% 10, sum)
knapsack_brute_force(x = knapsack_objects[100:250,], W = 3500, parallel = F)
knapsack_brute_force(x = knapsack_objects[100:250,], W = 3500, parallel = T)
furp
tapply( qout, (seq_along(qout)-1) %/% 10, sum)
m <- c()
x
W
w <- 3500
W <- 3500
m <- matrix(0,nrow = W,ncol = 1)
m
for(i in 1:nrow(x)){
for(j in 0:W){
if(x$w > j){
m[i,j] <- m[i-1,j]
} else {
m[i,j] <- max(m[i-1, j], m[i-1, j-w[i]] + v[i])
}
}
}
m <- matrix(0,nrow = W,ncol = W)
W <- 3500
for(i in 1:nrow(x)){
for(j in 0:W){
if(x$w > j){
m[i,j] <- m[i-1,j]
} else {
m[i,j] <- max(m[i-1, j], m[i-1, j-w[i]] + v[i])
}
}
}
m <- matrix(0,nrow = nrow(x),ncol = W)
W <- 3500
for(i in 1:nrow(x)){
for(j in 0:W){
if(x$w > j){
m[i,j] <- m[i-1,j]
} else {
m[i,j] <- max(m[i-1, j], m[i-1, j-w[i]] + v[i])
}
}
}
m[i,j] <- m[i-1,j]
m[i,j]
m <- matrix(0,nrow = nrow(x),ncol = W)
W <- 3500
for(i in 2:nrow(x)){
for(j in 1:W){
if(x$w > j){
m[i,j] <- m[i-1,j]
} else {
m[i,j] <- max(m[i-1, j], m[i-1, j-w[i]] + v[i])
}
}
}
m
m <- matrix(0,nrow = nrow(x),ncol = W)
W <- 3500
for(i in 2:nrow(x)){
for(j in 1:W){
if(x$w[i] > j){
m[i,j] <- m[i-1,j]
} else {
m[i,j] <- max(m[i-1, j], m[i-1, j-w[i]] + v[i])
}
}
}
m <- matrix(0,nrow = nrow(x),ncol = W)
W <- 3500
for(i in 2:nrow(x)){
for(j in 1:W){
if(x$w[i] > j){
m[i,j] <- m[i-1,j]
} else {
m[i,j] <- max(m[i-1, j], m[i-1, j-x$w[i]] + x$v[i])
}
}
}
m
m <- matrix(0,nrow = nrow(x),ncol = W)
m
j-x$w[i]
max(m[i-1, j], m[i-1, j-x$w[i]] + x$v[i])
m[i-1, j]
m <- matrix(1:W,nrow = nrow(x),ncol = W)
m
W <- 3500
for(i in 2:nrow(x)){
for(j in 1:W){
if(x$w[i] > j){
m[i,j] <- m[i-1,j]
} else {
m[i,j] <- max(m[i-1, j], m[i-1, j-x$w[i]] + x$v[i])
}
}
}
m[i-1, j]
max(m[i-1, j], m[i-1, j-x$w[i]] + x$v[i])
m[1,]
max(m)
furp <- as.numeric(intToBits(x$w))
data.frame(furp, sort(rep(1:8,8)))
data.frame(furp, x$w, sort(rep(1:8,8)))
intToBits(x$w)
head(m)
m <- matrix(1:W,nrow = nrow(x),ncol = W)
m[1,]
m <- matrix(1:W,nrow = nrow(x),ncol = W)
m[1,]
m <- matrix(rep(0:W,nrow(x)),nrow = nrow(x),ncol = W)
m <- matrix(rep(0:W,nrow(x)),nrow = nrow(x))
m
m[1,]
m <- matrix(rep(0:W,nrow(x)),ncol = W)
m <- matrix(rep(0:W,nrow(x)),nrow = nrow(x))
m[,1]
m <- matrix(0,nrow = nrow(x),ncol = W)
intToBits(x$w)
nrow(m)
ncol(m)
m <- matrix(0,nrow = nrow(x),ncol = W+1)
for(i in 1:nrow(x)){
m[i,] <- 0:W
}
m[,1]
m[1,]
for(i in 2:nrow(x)){
for(j in 1:W){
if(x$w[i] > j){
m[i,j] <- m[i-1,j]
} else {
m[i,j] <- max(m[i-1, j], m[i-1, j-x$w[i]] + x$v[i])
}
}
}
m
max(m)
m[1,]
m[i-1, j]
m
m[1,]
x$w
x$v
m[2,]
m <- matrix(0,nrow = nrow(x),ncol = W+1)
m[2,]
for(i in 1:nrow(x)){
m[i,] <- 0:W
}
m[2,]
for(i in 2:nrow(x)){
for(j in 1:(W+1)){
if(x$w[i] > j){
m[i,j] <- m[i-1,j]
} else {
m[i,j] <- max(m[i-1, j], m[i-1, j-x$w[i]] + x$v[i])
}
}
}
max(m)
which(m == max(m), arr.ind = TRUE)
set.seed(42)
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
x <- knapsack_objects[1:8,]
x
listfan <. list()
listfan <- list()
listfan <- list()
for(i in 1:nrow(x)){
listfan[[i]] <- combn(x,1)
}
listfan
listfan <- list()
for(i in 1:nrow(x)){
listfan[[i]] <- combn(x$w,i)
# for(j in 1:ncol)
}
listfan
ncol(listfan[[i]])
i=7
ncol(listfan[[i]])
listfan <- list()
vikter <- c()
for(i in 1:nrow(x)){
listfan[[i]] <- combn(x$w,i)
for(j in 1:ncol(listfan[[i]])){
vikter <- sum(listfan[[i]][,j])
}
}
vikter
listfan
listfan[[i]]
listfan <- list()
vikter <- c()
for(i in 1:nrow(x)){
listfan[[i]] <- combn(x$w,i)
for(j in 1:ncol(listfan[[i]])){
vikter[i] <- sum(listfan[[i]][,j])
}
}
vikter
listfan <- list()
svaren <- list()
vikter <- c()
max_val <- c()
for(i in 1:nrow(x)){
listfan[[i]] <- combn(x$w,i)
svaren[[i]] <- combn(x$v,i)
for(j in 1:ncol(listfan[[i]])){
vikter[i] <- sum(listfan[[i]][,j])
}
}
svaren
n <- 0
listfan <- list()
svaren <- list()
vikter <- c()
max_val <- c()
n <- 0
for(i in 1:nrow(x)){
listfan[[i]] <- combn(x$w,i)
svaren[[i]] <- combn(x$v,i)
for(j in 1:ncol(listfan[[i]])){
n <- n+1
vikter[n] <- sum(listfan[[i]][,j])
}
}
vikter
W <- 3500
which(vikter < W)
lapply(listfan,FUN = sum)
listfan
lapply(listfan,FUN = function(x) {
apply(x, MARGIN = 2,FUN = sum)
})
vikter <-lapply(listfan,FUN = function(x) {
apply(x, MARGIN = 2,FUN = sum)
})
which(vikter < W)
vikter
x
listfan
vikter
listfan
unlist(listfan)
